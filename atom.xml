<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一直努力就很好...</title>
  
  <subtitle>victsonder</subtitle>
  <link href="http://victsonder.github.io/atom.xml" rel="self"/>
  
  <link href="http://victsonder.github.io/"/>
  <updated>2022-03-04T09:51:01.064Z</updated>
  <id>http://victsonder.github.io/</id>
  
  <author>
    <name>victsonder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统——Linux常见命令</title>
    <link href="http://victsonder.github.io/2022/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <id>http://victsonder.github.io/2022/03/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</id>
    <published>2022-03-04T03:24:51.000Z</published>
    <updated>2022-03-04T09:51:01.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-统计行数"><a href="#0-统计行数" class="headerlink" title="0 统计行数"></a>0 统计行数</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">file_path <span class="token operator">=</span> r<span class="token string">'hightemp.txt'</span>number <span class="token operator">=</span> len<span class="token punctuation">(</span>open<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>.readlines<span class="token punctuation">(</span><span class="token punctuation">))</span>print<span class="token punctuation">(</span><span class="token string">"共有%d行"</span>%number<span class="token punctuation">)</span></code></pre><p><img src="/.io//0.png"><br><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wc</span> hightemp.txt   <span class="token comment" spellcheck="true"># 显示行数 字数 字节数</span>$ <span class="token function">wc</span> -l hightemp.txt  <span class="token comment" spellcheck="true"># 只显示行数</span>$ <span class="token function">wc</span> -w hightemp.txt  <span class="token comment" spellcheck="true"># 只显示字数</span>$ <span class="token function">wc</span> -c hightemp.txt  <span class="token comment" spellcheck="true"># 只显示字节数</span></code></pre><p><img src="/.io//00.png"></p><h2 id="1-把制表符换成空格"><a href="#1-把制表符换成空格" class="headerlink" title="1 把制表符换成空格"></a>1 把制表符换成空格</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"hightemp.txt"</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"hightemp1.txt"</span>,<span class="token string">'w'</span><span class="token punctuation">)</span>readline <span class="token operator">=</span> f.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> readline:    print<span class="token punctuation">(</span>line,end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    line <span class="token operator">=</span> line.replace<span class="token punctuation">(</span><span class="token string">"\t"</span>,<span class="token string">"    "</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    f1.write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>f1.close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/.io//1.png"><br><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> <span class="token string">'s/\t/ /g'</span> hightemp.txt  <span class="token comment" spellcheck="true"># 'g' command means "Copy hold space to pattern space".</span>$ <span class="token function">cat</span> hightemp.txt <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">"\t"</span> <span class="token string">" "</span>$ <span class="token function">expand</span> hightemp.txt</code></pre><p><img src="/.io//11.png"></p><h2 id="2-将文件的第一列保存在co11-txt中，第二列保存在co12-txt中"><a href="#2-将文件的第一列保存在co11-txt中，第二列保存在co12-txt中" class="headerlink" title="2 将文件的第一列保存在co11.txt中，第二列保存在co12.txt中"></a>2 将文件的第一列保存在co11.txt中，第二列保存在co12.txt中</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"co11.txt"</span>,<span class="token string">'w'</span><span class="token punctuation">)</span>line<span class="token operator">=</span>f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> line:    t1<span class="token operator">=</span>line.split<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>t1<span class="token punctuation">[</span>0:1<span class="token punctuation">]</span>    list.append<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>    line<span class="token operator">=</span>f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> l <span class="token keyword">in</span> list:    print<span class="token punctuation">(</span>l<span class="token punctuation">)</span>     <span class="token keyword">for</span> temp <span class="token keyword">in</span> l:          f1.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp<span class="token punctuation">))</span>        f1.write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>f1.close<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"co12.txt"</span>,<span class="token string">'w'</span><span class="token punctuation">)</span>line<span class="token operator">=</span>f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> line:    t1<span class="token operator">=</span>line.split<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>t1<span class="token punctuation">[</span>1:2<span class="token punctuation">]</span>    list.append<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>    line<span class="token operator">=</span>f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> l <span class="token keyword">in</span> list:    print<span class="token punctuation">(</span>l<span class="token punctuation">)</span>     <span class="token keyword">for</span> temp <span class="token keyword">in</span> l:          f1.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>temp<span class="token punctuation">))</span>        f1.write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>f1.close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/.io//2.png"><br><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cut</span> -f 1 hightemp.txt <span class="token operator">></span> co11.txt$ <span class="token function">cut</span> -f 2 hightemp.txt <span class="token operator">></span> co12.txt</code></pre><p><img src="/.io//22.png"></p><h2 id="3-将co11-txt和co12-txt结合"><a href="#3-将co11-txt和co12-txt结合" class="headerlink" title="3 将co11.txt和co12.txt结合"></a>3 将co11.txt和co12.txt结合</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">f1 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"co11.txt"</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>f2 <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"co12.txt"</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"co13.txt"</span>,<span class="token string">'w'</span><span class="token punctuation">)</span>readline1 <span class="token operator">=</span> f1.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> readline1:       print<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    f.write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"co13.txt"</span>,<span class="token string">'a+'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a+ 读写追加</span>f.write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> f2:    f.write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/.io//3.png"><br><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">paste</span> co11.txt -sd <span class="token string">'\n'</span> co12.txt</code></pre><p><img src="/.io//33.png"></p><h2 id="4-从头开始输出N行"><a href="#4-从头开始输出N行" class="headerlink" title="4 从头开始输出N行"></a>4 从头开始输出N行</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">count<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"从头输入行数："</span><span class="token punctuation">))</span>number<span class="token operator">=</span>0f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>lines<span class="token operator">=</span>f.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines:    number<span class="token operator">=</span>number+1    print<span class="token punctuation">(</span>line,end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> number<span class="token operator">==</span>count:        <span class="token keyword">break</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">head</span> -n 7 hightemp.txt</code></pre><h2 id="5-从末尾开始输出N行"><a href="#5-从末尾开始输出N行" class="headerlink" title="5 从末尾开始输出N行"></a>5 从末尾开始输出N行</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">count<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"末尾输入行数："</span><span class="token punctuation">))</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>lines<span class="token operator">=</span>f.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>length<span class="token operator">=</span>len<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>number<span class="token operator">=</span>length-count<span class="token keyword">while</span> number<span class="token operator">!=</span>length:    print<span class="token punctuation">(</span>lines<span class="token punctuation">[</span>number<span class="token punctuation">]</span>,end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    number<span class="token operator">=</span>number+1</code></pre><p><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tail</span> -n 5 hightemp.txt</code></pre><p><img src="/.io//45.png"></p><h2 id="6-把文件分为N块"><a href="#6-把文件分为N块" class="headerlink" title="6 把文件分为N块"></a>6 把文件分为N块</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">def divide<span class="token punctuation">(</span>list1, num<span class="token punctuation">)</span>:    result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#[]*num</span>    <span class="token keyword">for</span> i,j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>:        result<span class="token punctuation">[</span>i%num<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#每次取下标为num的倍数</span>    <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token keyword">:</span>    num<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入組数："</span><span class="token punctuation">))</span>    list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    lines<span class="token operator">=</span>f.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines:        s1<span class="token operator">=</span>line.strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#去掉每行最后的换行符"\n"</span>        s2<span class="token operator">=</span>s1.split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#以"\t"为标志，将每行分割成列表</span>        list.append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    f.close<span class="token punctuation">(</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> divide<span class="token punctuation">(</span>list, num<span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> temp:        print<span class="token punctuation">(</span>t,<span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><p><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">split</span> -l 8 hightemp.txt </code></pre><p><img src="/.io//linux/6.png"></p><h2 id="7-输出第一列中不同字符串的集合"><a href="#7-输出第一列中不同字符串的集合" class="headerlink" title="7 输出第一列中不同字符串的集合"></a>7 输出第一列中不同字符串的集合</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">from pypinyin <span class="token function">import</span> lazy_pinyinlist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>list1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'co11.txt'</span>,<span class="token string">"r"</span><span class="token punctuation">)</span>lines <span class="token operator">=</span> f.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines:    s1<span class="token operator">=</span>line.strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    list.append<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list:    <span class="token keyword">if</span> i not <span class="token keyword">in</span> list1:        list1.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>list1.sort<span class="token punctuation">(</span>key<span class="token operator">=</span>lambda char: lazy_pinyin<span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token punctuation">[</span>lazy_pinyin<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> list1<span class="token punctuation">]</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>/source/linux/7.png<span class="token punctuation">)</span></code></pre><p><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> -u co11.txt</code></pre><p><img src="/.io//linux/77.png"></p><h2 id="8-将各行以第三项的数值从高到低进行排序"><a href="#8-将各行以第三项的数值从高到低进行排序" class="headerlink" title="8 将各行以第三项的数值从高到低进行排序"></a>8 将各行以第三项的数值从高到低进行排序</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">with open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span><span class="token punctuation">)</span> as f:    l <span class="token operator">=</span> sorted<span class="token punctuation">(</span>f,key<span class="token operator">=</span>lambda x:x.split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span>,reverse<span class="token operator">=</span>True<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> l:    print<span class="token punctuation">(</span>each,end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> -rn -k3 hightemp.txt</code></pre><p><img src="/.io//linux/9.png"></p><h2 id="9-求各行第一项字符串的频率，并按出现频率从高到低排列"><a href="#9-求各行第一项字符串的频率，并按出现频率从高到低排列" class="headerlink" title="9 求各行第一项字符串的频率，并按出现频率从高到低排列"></a>9 求各行第一项字符串的频率，并按出现频率从高到低排列</h2><p><strong>python</strong></p><pre class=" language-bash"><code class="language-bash">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>with open<span class="token punctuation">(</span><span class="token string">'hightemp.txt'</span><span class="token punctuation">)</span> as f:    line <span class="token operator">=</span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> line:        temp <span class="token operator">=</span> line.split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>        list1.append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        line <span class="token operator">=</span> f.readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> list1:    <span class="token keyword">if</span> each <span class="token keyword">in</span> dict1:        dict1<span class="token punctuation">[</span>each<span class="token punctuation">]</span> +<span class="token operator">=</span> 1    else:        dict1<span class="token punctuation">[</span>each<span class="token punctuation">]</span> <span class="token operator">=</span> 1dict1 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dict1.items<span class="token punctuation">(</span><span class="token punctuation">)</span>, key <span class="token operator">=</span> lambda x:x<span class="token punctuation">[</span>1<span class="token punctuation">]</span>,reverse <span class="token operator">=</span>True<span class="token punctuation">)</span><span class="token keyword">for</span> each <span class="token keyword">in</span> dict1:    print<span class="token punctuation">(</span>each<span class="token punctuation">[</span>1<span class="token punctuation">]</span>,each<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>Linux命令</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cut</span> -f 1 hightemp.txt <span class="token operator">|</span> <span class="token function">sort</span> -rn <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span> <span class="token function">sort</span> -rn -k1</code></pre><p><img src="/.io//linux/99.png"></p><p><strong>Others….</strong><br>大于号&gt;: 将产生的内容（比如日志）输出到某个文件<br>小于号&lt;: 使用某个文件的内容作为标准输入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-统计行数&quot;&gt;&lt;a href=&quot;#0-统计行数&quot; class=&quot;headerlink&quot; title=&quot;0 统计行数&quot;&gt;&lt;/a&gt;0 统计行数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot; language-bash</summary>
      
    
    
    
    <category term="编程" scheme="http://victsonder.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://victsonder.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>测试开发学习记录3</title>
    <link href="http://victsonder.github.io/2022/03/04/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/"/>
    <id>http://victsonder.github.io/2022/03/04/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</id>
    <published>2022-03-04T02:47:09.000Z</published>
    <updated>2022-03-04T03:10:47.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="selenium-python实现web自动化测试"><a href="#selenium-python实现web自动化测试" class="headerlink" title="selenium+python实现web自动化测试"></a>selenium+python实现web自动化测试</h1><p>难点：如何准确快速地选择到想要的页面元素</p><p>使用webdriver控制浏览器</p><ol><li><p>自动化程序通过selenium客户端库构建一个http请求发给浏览器驱动，然后浏览器驱动再转发给浏览器，浏览器将网址打开然后把结果返回。</p></li><li><p>选择元素（方法：告诉浏览器要操作的界面元素是什么特征）</p><p>根据<strong>id属性</strong>选择元素  【id可以作为元素的编号，在HTML中标记元素】</p><p>根据<strong>class属性、tag名</strong>选择元素</p></li></ol><p>不仅 <u>WebDriver对象</u>有选择元素（整个web页面）的方法， <u>WebElement对象</u>也有选择元素（该元素的内部）的方法</p><ol start="3"><li><p>css selector 语法选择元素</p><p><code>#id值</code> <code>.class值</code></p><p>验证css表达式</p><p>父元素的第n个子节点  nth-child( )</p><p>父元素的倒数第n个子节点  nth-last-child( )</p><p>父元素的第几个某类型的子节点  nth-of-type( )</p><p>父元素的倒数第几个某类型的子节点  nth-last-of-type( )</p></li><li><p>在html语法中，frame 元素 或者iframe元素的内部 会包含一个 <strong>被嵌入的</strong> 另一份html文档。</p></li><li><p>使用ActionChains来模拟鼠标移动的操作</p></li><li><p>冻结界面</p></li><li><p>弹出对话框</p></li><li><p>弹出框处理——显示信息是否正确</p></li><li><p>Xpath  （区别于css的是xpath可以选择父节点）</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;selenium-python实现web自动化测试&quot;&gt;&lt;a href=&quot;#selenium-python实现web自动化测试&quot; class=&quot;headerlink&quot; title=&quot;selenium+python实现web自动化测试&quot;&gt;&lt;/a&gt;selenium+py</summary>
      
    
    
    
    <category term="测试开发" scheme="http://victsonder.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="测试开发" scheme="http://victsonder.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>测试开发学习记录2</title>
    <link href="http://victsonder.github.io/2022/03/04/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/"/>
    <id>http://victsonder.github.io/2022/03/04/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</id>
    <published>2022-03-04T02:47:00.000Z</published>
    <updated>2022-03-04T07:49:23.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jmeter和Postman的初步了解"><a href="#Jmeter和Postman的初步了解" class="headerlink" title="Jmeter和Postman的初步了解"></a>Jmeter和Postman的初步了解</h1><h2 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h2><p>Web压力接口测试，利用测试片段。</p><h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><p>可以进行API测试，但是只能串行运行测试，针对单个的http请求，而不能并行测试。</p><p>此处对于一个基于SSM框架的项目进行测试，模拟前端对后端发送请求。</p><h2 id="两者之间的区别"><a href="#两者之间的区别" class="headerlink" title="两者之间的区别"></a>两者之间的区别</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jmeter和Postman的初步了解&quot;&gt;&lt;a href=&quot;#Jmeter和Postman的初步了解&quot; class=&quot;headerlink&quot; title=&quot;Jmeter和Postman的初步了解&quot;&gt;&lt;/a&gt;Jmeter和Postman的初步了解&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="测试开发" scheme="http://victsonder.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="测试开发" scheme="http://victsonder.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>测试开发学习记录1</title>
    <link href="http://victsonder.github.io/2022/03/04/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <id>http://victsonder.github.io/2022/03/04/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</id>
    <published>2022-03-04T02:46:51.000Z</published>
    <updated>2022-03-04T08:07:19.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《软件测试的艺术》阅读有感"><a href="#《软件测试的艺术》阅读有感" class="headerlink" title="《软件测试的艺术》阅读有感"></a>《软件测试的艺术》阅读有感</h1><p>假期阅读一本《软件测试的艺术》，收获颇多，因此记录下，用于之后多次翻阅。</p><p>书中将测试人员比作“医生”（当我们测试某个程序时，它就相当于是我们的病人），“破坏者”（相对于开发人员是创造者而言），测试是软件开发中的“黑色艺术”，这些描写非常的形象，还有说法开发人员写程序好比造了一座桥，而测试人员则是给桥加上护栏的人，亦可作为守门员，质量的把关者。<br>在一个典型的编程项目中，软件测试或者系统测试大约会占用项目时间和超过50%的总成本（测试应该引起重视）。</p><h2 id="软件测试的心理学"><a href="#软件测试的心理学" class="headerlink" title="软件测试的心理学"></a>软件测试的心理学</h2><p>软件测试更适宜被视为试图发现程序中错误（假设其存在）的破坏性的过程，从破坏者的角度来考虑能否为程序增加一些<br>价值和可靠性。一个成功的测试用例，通过诱发程序发生错误，可以在这个方向上促进软件质量的改进。<br>当然，最终我们还是要通过软件测试来建立某种程度的信心：<strong>软件做了其应该做的，未做其不应该做的。</strong>但是通过对<br>错误的不断研究是实现这个目的的最佳途径。</p><h2 id="软件测试的经济学"><a href="#软件测试的经济学" class="headerlink" title="软件测试的经济学"></a>软件测试的经济学</h2><p>及早发现bug并做出相应的解决措施，降低损失，盈利</p><h2 id="软件测试的10条原则"><a href="#软件测试的10条原则" class="headerlink" title="软件测试的10条原则"></a>软件测试的10条原则</h2><p>1.测试用例中一个必需部分是对预期输出或结果进行定义<br>  一个测试用例必须包括两个部分：对程序的输入数据的描述、对程序在上述输入数据下的正确输出结果的精确描述<br>2.程序员应当避免测试自己编写的代码<br>3.编写软件的组织不应当测试自己编写的软件（当局者迷旁观者清）<br>4.应当彻底检查每个测试的执行结果<br>5.测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应当根据无效和未预料的输入情况<br>6.检查程序是否“未做其应该做的”仅是测试的一半，测试的另一半是检查程序是否“做了其不应该做的”<br>7.应避免测试用例用后即弃，除非软件本身就是一次性的软件<br>8.计划测试工作时不应默认假定不会发现错误<br>9.程序某部分存在更多错误的可能性，与该部分已发现错误的数量成正比<br>10.软件测试是一项极富创造性、机具智力挑战性的工作。</p><h2 id="测试用例的设计-ref"><a href="#测试用例的设计-ref" class="headerlink" title="测试用例的设计 ref"></a>测试用例的设计 <a href="https://zhuanlan.zhihu.com/p/103761672">ref</a></h2><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>注重软件产品的“功能性需求”，程序就相当于一个黑盒子，测试目标与程序的内部机制和结构完全无关，集中在发现程序若不按照其正确运行的环境条件会出现什么。<br>常用穷举输入测试，但若是程序逐渐变大，则需要创建无限的测试用例（不可能实现！）<br><strong>常用的方法</strong><br>1.等价类划分</p><p>可以分为两种：有效等价类和无效等价类<br>e.g. 试卷分数总分为100分<br>有效等价类：0 ≤ score ≤ 100<br>无效等价类1：Scores ＜ 0<br>无效等价类2：Scores ＞ 100</p><p>2.边界值分析<br>主要的测试点 是对“输入”或“输出”的“边界”值进行测试，通常作为等价类划分法的补充，但两者的重要区别在于：边界值分析考察正处于等价划分边界或在边界附近的状态。</p><p>3.因果图分析<br>较前两种的区别在于该方法会考虑到输入条件之间的联系，以及它们相互组合后会产生哪些新的情况。<br>基本步骤：<br>    ·1.将规格说明分解为可执行的片段，即哪些是输入，哪些是输出<br>    ·2.确定规格说明中的因果关系<br>    ·3.分析规格说明的语义内容，并将其转换为连接因果关系的布尔图<br>    ·4.由于语法或者环境限制而不能联系起来的“因”和“果”，要给图加上注解符号<br>    ·5.将因果图转换成一个有限项的判定表<br>    ·6.将判定表中的列转换成测试用例</p><pre class=" language-bash"><code class="language-bash">E约束<span class="token punctuation">(</span>异；异或<span class="token punctuation">)</span>：a，b最多有一个可能为1，不能同时为1；I约束<span class="token punctuation">(</span>或；包含<span class="token punctuation">)</span>：a，b，c中至少有一个必须为1，不能同时为0；O约束<span class="token punctuation">(</span>惟一<span class="token punctuation">)</span>：a和b必须有一个且仅有一个为1；R约束<span class="token punctuation">(</span>要求<span class="token punctuation">)</span>：a是1时，b必须是1，即a为1时，b不能为0；M约束：对输出条件的约束，若结果a为1，则结果b必须为0</code></pre><p>4.错误推断法<br>列举出可能犯的错误或错误易发情况的清单，然后依据清单来编写测试用例</p><h3 id="白盒测试-ref"><a href="#白盒测试-ref" class="headerlink" title="白盒测试 ref"></a>白盒测试 <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1646373588&ver=3655&signature=9u8Ns0*bhVt8H1*egN0oj2GFSvuKaj*xLhJhkQQ5BB4Gx8eAOLaWRgLRh89Fj9LSFcUgpQxwSO1fkPOntX1B0HHeQ6da2SQTgcAFYq2REMZhcsdwql*aUzKxgWlWOGQG&new=1">ref</a></h3><p>关注的是测试用例执行的程度或覆盖程序逻辑结构的程度,可以看到程序内部结构及实现逻辑，是一种逻辑驱动的测试。<br>·静态测试<br>侧重于源代码检查和优化，方法有：同行评审、静态结构分析、代码质量度量和对变量的数据流测试。<br>·动态测试<br>侧重于关键程序结构的测试，其基本测试方法是通过对导致程序结构复杂度的判定表达式、执行路径和循环结构，来设计相应的测试用例。从而达到某种程度的测试覆盖，确保测试的测试完备性和无冗余性。方法有：基于逻辑表达式覆盖指标的判定；基于全路径覆盖的独立路径测试；以及基于循环过程覆盖的对循环的测试等等。</p><h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><p>一般以黑盒测试方法为主，以白盒测试作为辅助</p><ol><li>若规格说明中包含输入条件组合的情况，则应首先使用因果图分析方法</li><li>在任何情况下都应该使用边界值分析方法（刷LeetCode时边界条件总是分析不好，ε&#x3D;(´ο｀*)))唉）</li><li>应为输入和输出确定有效和无效等价类，在必要情况下对上面的测试用例进行补充</li><li>使用错误猜测技术增加更多的测试用例（大胆地想，要多角度分析问题）</li><li>针对上述测试用例集来检查程序的逻辑结构时，应用判定覆盖、条件覆盖、判定&#x2F;条件覆盖或多重条件覆盖准则</li></ol><h2 id="软件测试的流程"><a href="#软件测试的流程" class="headerlink" title="软件测试的流程"></a>软件测试的流程</h2><pre class=" language-bash"><code class="language-bash">Step1. 根据项目、产品的需求提炼测试需求。Step2. 根据测试需求和项目的整体计划，制定测试计划，测试方案等，包括测试的时间节点安排，人力资源安排，测试策略等，并进行评审。Step3. 根据测试需求以及相关的设计文档，编写测试用例，即明确每个测试点的具体的操作步骤，预期结果等内容，并对用例进行评审。Step4. 准备测试环境和测试数据，包括测试系统部署的硬件环境和软件环境。Step5. 执行测试用例，提交测试过程中发现的bug，代码截图，仿真截图，并通过版本迭代进行回归测试，验证相关的bug。Step6. 完成内部软件系统的功能测试，系统测试之后，系统趋于稳定，提交客户进行验收测试。Step7. 编写软件测试报告。Step8. 对测试过程进行总结，并将测试过程中的所有文档进行归档。</code></pre><p><strong>单元（模块）测试</strong><br>总体上面向白盒测试，使用一种或多种白盒测试方法分析模块的逻辑结构，然后使用黑盒测试方法对照模块的规格说明以补充测试用例。<br>增量测试：先将下一步要测试的模块组装到测试完成的模块集合中，然后再进行测试<br>    驱动模块：用来模拟被测试模块的上一级模块<br>    桩模块：模拟被测试的模块所调用的模块，即测试上层模块时用于模拟下层模块的模块<br>    自顶向下的测试：<br><img src="/images/topdown.png"><br>    自底向上的测试：<br>非增量测试(崩溃测试)：先独立地测试每个模块，然后再将这些模块组装成完整的程序</p><p>模块测试的<strong>目的是发现程序模块与其接口规格说明之间的不一致</strong>。</p><p><strong>集成测试</strong><br>将所有的程序模块进行有序的、递增的测试，检验程序单元或部件的接口关系，逐步集成为符合要求的整体系统或程序。<br><strong>确认测试(有效性测试)&#x2F;功能测试</strong><br>在模拟的环境下，验证软件的所有功能和性能及其他特性是否与用户的预期要求一致。<strong>目的是为了证明程序未能符合其外部规格说明</strong>。<br><strong>系统测试</strong><br>在真实的系统运行的环境下，比较完整的程序系统能否和系统正确配置、连接，并最终满足用户的所有需求。<strong>目的是为了证明软件产品与其初始目标不一致</strong>。<br><img src="/images/system.png"><br><strong>验收测试</strong><br>按照项目任务书或合同、供需双方约定的验收依据文档，进行对整个系统的测试与评审，决定是否接收或拒收系统。</p><h2 id="调试方法和原则————“思考”"><a href="#调试方法和原则————“思考”" class="headerlink" title="调试方法和原则————“思考”"></a>调试方法和原则————“思考”</h2><p><strong>方法</strong><br>暴力法调试：利用内存信息输出来调试；在程序中写入打印语句；自动化调试工具<br>归纳法调试：确定相关数据，组织数据（有点像5W原则），作出假设，证明假设，解决问题<br>演绎法调试<br>回溯法调试：从程序产生不正确结果的地方开始，推断出程序变量应该什么值<br>测试法调试：利用测试用例<br><strong>原则</strong><br>定位错误的原则<br>修改错误的技术</p><h2 id="不同领域下的测试"><a href="#不同领域下的测试" class="headerlink" title="不同领域下的测试"></a>不同领域下的测试</h2><p>敏捷开发模式下的测试：围绕以用户为中心、以客户需求为导向的开发过程，主要有三个特点：依赖客户的参与、测试驱动以及紧凑的迭代开发周期<br>互联网应用测试<br>移动应用测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《软件测试的艺术》阅读有感&quot;&gt;&lt;a href=&quot;#《软件测试的艺术》阅读有感&quot; class=&quot;headerlink&quot; title=&quot;《软件测试的艺术》阅读有感&quot;&gt;&lt;/a&gt;《软件测试的艺术》阅读有感&lt;/h1&gt;&lt;p&gt;假期阅读一本《软件测试的艺术》，收获颇多，因此记录下</summary>
      
    
    
    
    <category term="测试开发" scheme="http://victsonder.github.io/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="测试开发" scheme="http://victsonder.github.io/tags/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>C++知识点记录</title>
    <link href="http://victsonder.github.io/2022/03/04/Programming/"/>
    <id>http://victsonder.github.io/2022/03/04/Programming/</id>
    <published>2022-03-04T01:52:30.000Z</published>
    <updated>2022-03-04T02:36:12.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-关于getline-和cin-gt-gt-同时使用的情况："><a href="#一-关于getline-和cin-gt-gt-同时使用的情况：" class="headerlink" title="一.关于getline()和cin&gt;&gt;同时使用的情况："></a>一.关于getline()和cin&gt;&gt;同时使用的情况：</h2><p><strong>cin&gt;&gt;与getline的工作方式</strong><br>流提取运算符根据它后面的变量类型读取数据，从非空白符号开始，遇到Enter、Space、Tab键时结束。<br>getline函数从istream中读取一行数据，当遇到“\n”时结束返回。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#include&lt;iostream></span><span class="token comment" spellcheck="true">#include&lt;string></span>using namespace std<span class="token punctuation">;</span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int a<span class="token punctuation">;</span>    string b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入整数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入字符串："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    getline<span class="token punctuation">(</span>cin, b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"整数："</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串："</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span>output：请输入整数：10请输入字符串：整数：10字符串：</code></pre><p>造成程序<strong>错误结果的原因</strong>是，用户输入完整数后按回车结束输入，把“\n”留在了输入流里，这样换行符就被getline读取到，getline遇到换行符结束返回。</p><p><strong>解决的办法是手动清除换行符，在cin&gt;&gt;后加上 cin.ignore();</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#include&lt;iostream></span><span class="token comment" spellcheck="true">#include&lt;string></span>using namespace std<span class="token punctuation">;</span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int a<span class="token punctuation">;</span>    string b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入整数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    cin.ignore<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入字符串："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    getline<span class="token punctuation">(</span>cin, b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"整数："</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串："</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span>output：请输入整数：10请输入字符串：aabb整数：10字符串：aabb</code></pre><p>因此在使用getline函数之前要注意，输入流中是否有可能会有换行符，如果有则使用cin.ignore清除。<br><strong>也可以重新定义一个字符串c,getline(cin,c)</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#include&lt;iostream></span><span class="token comment" spellcheck="true">#include&lt;string></span>using namespace std<span class="token punctuation">;</span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int a<span class="token punctuation">;</span>    string b,c<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入整数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入字符串："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    getline<span class="token punctuation">(</span>cin, b<span class="token punctuation">)</span><span class="token punctuation">;</span>    getline<span class="token punctuation">(</span>cin, c<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"整数："</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串："</span> <span class="token operator">&lt;&lt;</span> c<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h2><p>关于voidvoid * fun( ) ; &#x2F;&#x2F;声明一个返回值是任意类型的指针的函数fun()<br>void vfun( ) ; &#x2F;&#x2F;声明一个没有返回值的函数vfun()<br>void (*)( )  这是一种变量类型，（函数指针）可用来定义函数指针变量，<br>如：void (*pfun)( ) ; &#x2F;&#x2F;声明一个函数指针变量pfun，该类型函数就是void vfun( ) 这种类型，pfun可以指向这类函数，如：pfun&#x3D;vfun ;</p><p><strong>指针函数</strong>是指带指针的函数，即本质是一个函数，函数返回类型是某一类型的指针(地址)，因此返回值必须赋给同类型的指针变量int* f(x,y);<br><strong>函数指针</strong>是指向函数的指针变量，即本质是一个指针变量int （*f）(int x);f&#x3D;func;&#x2F;&#x2F;将func函数的首地址赋给指针f</p><p><strong>1.C++ 全局变量不明确与 using namespace std 冲突</strong></p><pre class=" language-bash"><code class="language-bash">//VS2019<span class="token comment" spellcheck="true">#include&lt;iostream></span>using namespace std<span class="token punctuation">;</span>int N<span class="token punctuation">;</span>int count <span class="token operator">=</span> 0<span class="token punctuation">;</span>void Process<span class="token punctuation">(</span>char a, int k, int step<span class="token punctuation">)</span><span class="token punctuation">{</span>    int x, y<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> N * N<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">></span> count<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count <span class="token operator">=</span> step<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">..</span>.<span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200520163144894.PNG"><br><code>reasons:</code><br>std命名空间里有std::count，因此与全局变量count冲突<br><code>solutions</code></p><ol><li>将全局变量count改为其他名称，如cnt</li><li>使用count的地方改为::count</li><li>不要使用using namespace std  <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1589963866&ver=2349&signature=Tfz56EnYVSz79Kg1o6Js1vdyKa2NSrpONvyiqw6sXJ8cXEI6S8meSqrxNm4p23qDsUzzDX9ggZy5DiZ*IVkwZ2fvMPHJGe610myuIk1*8lt-79nyU*v6TJ4G*pl8Hbk6&new=1">为什么我不建议你用【using namespace std】</a>.</li></ol><p><strong>2.表达式必须含有常量值</strong></p><pre class=" language-bash"><code class="language-bash">int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int N <span class="token operator">=</span> 4<span class="token punctuation">;</span>    char a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200520180240611.PNG"><br><code>reasons:</code><br>c++中不允许使用变量作为数组的长度定义数组，必须为常量值，c++中所有的内存需求都是在程序执行前通过定义的常量来确定的。<br><code>solutions</code><br>动态分配内存</p><p>1.一维数组申请</p><pre class=" language-bash"><code class="language-bash">Type *p<span class="token operator">=</span>new Type<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">..</span>.delete<span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span>//for exampleint num<span class="token punctuation">;</span>cin<span class="token operator">>></span>num<span class="token punctuation">;</span>int *a<span class="token operator">=</span>new int<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">..</span>.delete<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span> </code></pre><p>2.使用vector容器</p><pre class=" language-bash"><code class="language-bash">int num<span class="token punctuation">;</span>cin <span class="token operator">>></span> num<span class="token punctuation">;</span>vector a<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.二维数组申请</p><pre class=" language-bash"><code class="language-bash">Type **p<span class="token operator">=</span>new Type*<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>//数组p<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>++i<span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>new Type<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//for example<span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>    char** a <span class="token operator">=</span> new char* <span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>++i<span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new char<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>++i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>++j<span class="token punctuation">)</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-关于getline-和cin-gt-gt-同时使用的情况：&quot;&gt;&lt;a href=&quot;#一-关于getline-和cin-gt-gt-同时使用的情况：&quot; class=&quot;headerlink&quot; title=&quot;一.关于getline()和cin&amp;gt;&amp;gt;同时使用的</summary>
      
    
    
    
    <category term="编程" scheme="http://victsonder.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://victsonder.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>外刊阅读</title>
    <link href="http://victsonder.github.io/2022/03/04/English/"/>
    <id>http://victsonder.github.io/2022/03/04/English/</id>
    <published>2022-03-04T01:50:58.000Z</published>
    <updated>2022-03-04T02:36:01.802Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/weixin.jpg" alt="微信公众号 | 维尼的糖果罐"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/weixin.jpg&quot; alt=&quot;微信公众号 | 维尼的糖果罐&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="英语学习" scheme="http://victsonder.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="英语学习" scheme="http://victsonder.github.io/tags/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于 Raspberry Pi+OpenCV+Arduino 的智能小车</title>
    <link href="http://victsonder.github.io/2022/03/03/%E5%9F%BA%E4%BA%8E%20Raspberry%20Pi+OpenCV+Arduino%20%E7%9A%84%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6/"/>
    <id>http://victsonder.github.io/2022/03/03/%E5%9F%BA%E4%BA%8E%20Raspberry%20Pi+OpenCV+Arduino%20%E7%9A%84%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6/</id>
    <published>2022-03-03T13:24:57.000Z</published>
    <updated>2022-03-04T02:00:38.975Z</updated>
    
    <content type="html"><![CDATA[<p>本项目基于上位机Raspberry Pi和下位机Arduino相互通信的环境，利用SSH远程登录，结合摄像头OpenCV和<br>Python进行图像的传输并判别交通信号的箭头，小车识别到绿色箭头朝箭头指示方向转弯，识别到红色箭头则<br>停在原地，并计算左右两侧的 PWM 值实现直线行驶，利用超声波模块检测小车前方障碍物距离实现避障。<br><img src="/images/cv2.jpg"></p><h2 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h2><pre class=" language-bash"><code class="language-bash">    本项目有两个控制板块，树莓派作为上位机，Arduino作为下位机，超声波模块用于检测前方一定距离内是否有箭头标志阻挡前进的路线，电机驱动模块以PWM方式控制左右两侧的轮子（左边两个轮子相同速度信号，右边两个轮子相同速度信号），通过左右车轮的速度差来达到转弯的效果。    树莓派作为上位机，通过摄像头判别交通箭头的信号。判别箭头是通过判断识别到的轮廓（箭头轮廓）的重心和最小外接矩形的重心两者的位置，箭头的朝向跟箭头重心的位置直接关联，所以可以根据两个重心的位置关系来判断箭头是左箭头还是右箭头。关于颜色的识别，将RGB颜色转化位HSV空间的颜色，判断图片中的颜色是否在绿色或者红色的色域中，在色域中则说明是对应的颜色。</code></pre><p><img src="/images/cv.png" alt="框架"></p><h2 id="制作方案"><a href="#制作方案" class="headerlink" title="制作方案"></a>制作方案</h2><h3 id="环境的安装"><a href="#环境的安装" class="headerlink" title="环境的安装"></a>环境的安装</h3><p>主要涉及关于树莓派和OpenCV的安装<br><strong>·1 树莓派安装</strong>（便于可视化可以配置一台显示屏，但意义就没有了，因此获取树莓派IP后可以通过SSH远程控制树莓派）<br>    1.1 下载系统镜像（之前写过关于<a href="https://blog.csdn.net/qq_43451257/article/details/105060324?spm=1001.2014.3001.5502">Ubuntu16.04下Git的安装</a>）,此处使用的是Raspbian的镜像（自带桌面和一些软件）<br>    1.2 格式化SD卡，将镜像写入，完成系统的安装<br>    1.3 开启SSH<br>        首先在根目录下新建SSH文件，用于远程登录，然后就把SD卡插到树莓派上；<br>        第一次需要用网线连接树莓派和电脑，使其处于同一网段下，然后通过PuTTY配置<br>        <strong>IP地址：raspberrypi.local 端口：22</strong><br>        连接成功后输入登录名pi和密码raspberry,接下来简单配置并连接与电脑相同的WiFi；<br>        可下载一个VNC Viewer用于连接到树莓派的桌面。</p><p><strong>·2 OpenCV安装</strong><br>    安装并编译OpenCV的资源库<br>    注意接下来都要在cv的环境中操作</p><h3 id="硬件的连接"><a href="#硬件的连接" class="headerlink" title="硬件的连接"></a>硬件的连接</h3><p><strong>主要器材：</strong><br>航模电池：给Arduino和电机驱动模块供电；<br>降压模块：用于降压保护Arduino和电机，并可以稳定电压；<br>电机驱动模块（L298N）：给电机供电，左侧两个电机的正极同时连接电机驱动模块上的一个out3，负极连接到out4，右侧连接out1、out2；<br>超声波模块：直接接在Arduino板块上，由Arduino供电并且由Arduino读取返回的信号值，即反馈小车当前的位置状态。</p><p>Step1. 将树莓派与Arduino通过USB线（通用串行总线）建立连接。【Arduino在树莓派中是靠串口连接通信的，有<a href="https://www.cnblogs.com/jingxinbk/p/12408886.html">两种</a>：USB连接和GPIO通信(其中树莓派的RX引脚——Arduino的TX引脚，树莓派的TX引脚——Arduino的RX引脚，树莓派的GND引脚——Arduino的GND引脚)】<br>Step2. 在树莓派终端输入ls &#x2F;dev&#x2F;tty*查看两者连接端口的名字，若是出现ttyACM0则二者成功建立通信。<br>Step3. 编写树莓派与Arduino之间通信的代码</p><pre><code>树莓派端：</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> serial    <span class="token comment" spellcheck="true"># /dev/ttyACM0 是树莓派上编号为0的USB口（可以在/dev目录下通过观察拔插对应的USB口找到对应的编号）</span>ser <span class="token operator">=</span> serial.Serial<span class="token punctuation">(</span><span class="token string">'/dev/ttyACM0'</span>, 9600,timeout<span class="token operator">=</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true"># PL011串口[/dev/ttyACM0]（外部晶振驱动）较 mini串口[/dev/ttyS0]（自带晶振驱动）稳定性高</span>try:  <span class="token keyword">while</span> 1:    ser.write<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 树莓派通过串口发送字符's'</span>    response <span class="token operator">=</span> ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 读取串口的返回值</span>    print response<span class="token punctuation">;</span>except:  ser.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 抛出异常后关闭</span></code></pre><pre><code>Arduino端：【注意：将程序烧到Arduino后一定要把USB拔掉插到树莓派上，不然会导致串口占用！！！】</code></pre><pre class=" language-bash"><code class="language-bash">void setup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Serial.begin<span class="token punctuation">(</span>9600<span class="token punctuation">)</span><span class="token punctuation">;</span> // 波特率9600 bps<span class="token punctuation">}</span>void loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Serial.available<span class="token punctuation">(</span><span class="token punctuation">))</span>  <span class="token comment" spellcheck="true"># 判断串口缓存区是否有数据</span>    <span class="token punctuation">{</span>      if<span class="token punctuation">(</span><span class="token string">'s'</span> <span class="token operator">==</span> Serial.read<span class="token punctuation">(</span><span class="token punctuation">))</span>        Serial.println<span class="token punctuation">(</span><span class="token string">"Hello Raspberry,I am Arduino."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># Arduino收到字符's'后，就向串口打印"Hello Raspberry,I am Arduino."</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>   </code></pre><p><img src="/images/cv1.png" alt="硬件连接图"></p><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>RGB模型：R-红色、G-绿色、B-蓝色；(0,0,0)表示黑色、(255, 255, 255)表示白色。<br>HSV模型：色调（H:hue）—— 0°(以度为计量单位) ~ 360°(0~2π)，从逆时针开始计算，红色为0°，绿色为120°，蓝色为240°<br>        饱和度（S:saturation）—— 0.0 ~ 1.0<br>        亮度（V:value）—— 0.0(黑色)～1.0(白色)</p><p><img src="/images/Picture1.png"></p><p>So, <a href="https://blog.csdn.net/qq_33759946/article/details/90295377?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_aa&utm_relevant_index=5">为什么</a>要采用HSV空间的色域？</p><p><a href="https://math.hws.edu/graphicsbook/demos/c2/rgb-hsv.html">RGB&#x2F;HSV Color Demo</a></p><p>注意：在HSV中，V受光照的影响最大<br>处理方式：对V进行直方图均衡化处理，使各个亮度值的点数相近。</p><p>Step1. 获得红色掩膜（进行按位或运算1|1&#x3D;1，1|0&#x3D;0，0|1&#x3D;0，0|0&#x3D;0）<br>       获得绿色掩膜<br>Step2. 中值滤波处理（平滑图像，滤去噪声,保护图像的边缘）<br>Step3. 寻找轮廓并计算质心 【cv2.findContours()】<br>       比较轮廓重心(center_x, center_y)和外接矩形的重心(x+w&#x2F;&#x2F;2, y+h&#x2F;&#x2F;2),<br>        if ((x + w &#x2F;&#x2F; 2) &gt; center_x):<br>            向左转<br>        else :<br>            向右转</p><h3 id="上下位机之间的通信"><a href="#上下位机之间的通信" class="headerlink" title="上下位机之间的通信"></a>上下位机之间的通信</h3><p>Step1. 遇障—Arduino向树莓派传达Ready信号，树莓派识别完—树莓派向Arduino传达指令<br>Step2. 先由树莓派发起通信，Arduino进行回应</p><pre class=" language-bash"><code class="language-bash">ser.write<span class="token punctuation">(</span>signal.encode<span class="token punctuation">(</span><span class="token punctuation">))</span>time.sleep<span class="token punctuation">(</span>1<span class="token punctuation">)</span>response<span class="token operator">=</span>ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span>print response</code></pre><p>Step3. Arduino等待反馈控制信号</p><pre class=" language-bash"><code class="language-bash">Serial.available<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  <span class="token string">'s'</span><span class="token operator">==</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="上位机代码"><a href="#上位机代码" class="headerlink" title="上位机代码"></a>上位机代码</h2><pre class=" language-bash"><code class="language-bash">上位机<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token string">''</span><span class="token string">'首先由树莓派发起通讯，告知Arduino可以开始运动了；Arduino接收到树莓派的信号后开始运动，进入loop循环；遇到障碍物停车，发送信号，等待树莓派的指示，不进入loop；树莓派拍照，识别，传送信号给Arduino，Arduino收到信号，开始运动。              树莓派循环等待信号'</span><span class="token string">''</span><span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> numpy as np<span class="token function">import</span> cv2<span class="token function">import</span> serialser <span class="token operator">=</span> serial.Serial<span class="token punctuation">(</span><span class="token string">'/dev/ttyACM0'</span>, 9600,timeout<span class="token operator">=</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>font<span class="token operator">=</span> cv2.FONT_HERSHEY_SIMPLEXlower_red1<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>0,128,40<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 浅红色阈值下界</span>higher_red1<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>5,255,255<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 浅红色阈值上界</span>lower_red2<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>156,128,40<span class="token punctuation">]</span><span class="token punctuation">)</span>  higher_red2<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>180,255,255<span class="token punctuation">]</span><span class="token punctuation">)</span>  lower_green<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>35,100,46<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绿色阈值下界</span>higher_green<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>77,255,255<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绿色阈值上界</span>def cal<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>:    M <span class="token operator">=</span> cv2.moments<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算第一条轮廓的各阶矩,字典形式</span>    center_x <span class="token operator">=</span> int<span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m10"</span><span class="token punctuation">]</span> / <span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m00"</span><span class="token punctuation">]</span>+1e-20<span class="token punctuation">))</span>    center_y <span class="token operator">=</span> int<span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m01"</span><span class="token punctuation">]</span> / <span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m00"</span><span class="token punctuation">]</span>+1e-20<span class="token punctuation">))</span>    <span class="token keyword">return</span> M,center_x,center_ydef command<span class="token punctuation">(</span>text,color,signal<span class="token punctuation">)</span>:    ser.write<span class="token punctuation">(</span>signal.encode<span class="token punctuation">(</span><span class="token punctuation">))</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span>    response<span class="token operator">=</span>ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>    print response    cv2.putText<span class="token punctuation">(</span>frame, text, <span class="token punctuation">(</span>x, y - 5<span class="token punctuation">)</span>, font, 1.0, color, 2<span class="token punctuation">)</span>    print text    flag<span class="token operator">=</span>1def draw<span class="token punctuation">(</span>cnt,<span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span>,rectcolor,edgecentercolor<span class="token punctuation">)</span>:    cv2.rectangle<span class="token punctuation">(</span>frame, <span class="token punctuation">(</span>x, y<span class="token punctuation">)</span>, <span class="token punctuation">(</span>x + w, y + h<span class="token punctuation">)</span>, rectcolor, 2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将检测到的颜色框起来</span>    cv2.circle<span class="token punctuation">(</span>frame, <span class="token punctuation">(</span>x + w // 2, y + h // 2<span class="token punctuation">)</span>, 7, edgecentercolor, -1<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#质心</span>    cv2.drawContours<span class="token punctuation">(</span>frame, cnt, -1, edgecentercolor, 2<span class="token punctuation">)</span>ser.write<span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#告诉Arduino可以开始运动，进入loop循环开车</span>response <span class="token operator">=</span> ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#从串口读取一个字符串</span>print response while<span class="token punctuation">(</span>1<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true"># 等待Ready信号</span>    print <span class="token string">"in waiting"</span>    flag<span class="token operator">=</span>0 <span class="token comment" spellcheck="true">#得到命令flag=1,若是没有得到命令flag=0,继续进行摄像头的工作;每次小车停止后flag信息归零</span>    ser.write<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#发起通信，等待小车遇到障碍物</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>    response <span class="token operator">=</span> ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#读取遇到障碍物的消息</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>    print response <span class="token comment" spellcheck="true">#Ready</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token operator">==</span><span class="token string">'Ready'</span><span class="token punctuation">)</span>:        cap<span class="token operator">=</span>cv2.VideoCapture<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打开摄像头</span>        if<span class="token punctuation">(</span>cap.isOpened<span class="token punctuation">(</span><span class="token punctuation">))</span>:            while<span class="token punctuation">(</span>flag<span class="token operator">!=</span>1<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true">#没有得到命令就继续拍照识别</span>                print <span class="token string">'camera go'</span>                ret,frame<span class="token operator">=</span>cap.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按帧读取，这是读取一帧</span>                <span class="token comment" spellcheck="true"># 转化为HSV空间</span>                img_hsv<span class="token operator">=</span>cv2.cvtColor<span class="token punctuation">(</span>frame,cv2.COLOR_BGR2HSV<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#cv2.imshow('img_hsv', img_hsv)</span>                mask_red1<span class="token operator">=</span>cv2.inRange<span class="token punctuation">(</span>img_hsv,lower_red1,higher_red1<span class="token punctuation">)</span>                mask_red2<span class="token operator">=</span>cv2.inRange<span class="token punctuation">(</span>img_hsv,lower_red2,higher_red2<span class="token punctuation">)</span>                                mask_green<span class="token operator">=</span>cv2.inRange<span class="token punctuation">(</span>img_hsv,lower_green,higher_green<span class="token punctuation">)</span>                mask_red<span class="token operator">=</span>cv2.bitwise_or<span class="token punctuation">(</span>mask_red1,mask_red2<span class="token punctuation">)</span>                mask_green <span class="token operator">=</span> cv2.medianBlur<span class="token punctuation">(</span>mask_green, 7<span class="token punctuation">)</span>                  mask_red <span class="token operator">=</span> cv2.medianBlur<span class="token punctuation">(</span>mask_red, 7<span class="token punctuation">)</span>                  mask<span class="token operator">=</span>cv2.bitwise_or<span class="token punctuation">(</span>mask_green,mask_red<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 按位运算</span>                <span class="token comment" spellcheck="true"># 第一个参数是输入图像，第二个是轮廓检索模式，第三个是轮廓近似方法</span>                <span class="token comment" spellcheck="true"># 对应的返回值分别是图像，轮廓（是一个Python列表，用于存储图像中的所有轮廓），（轮廓的）层析结构</span>                <span class="token comment" spellcheck="true"># RETR_LIST用于提取所有的轮廓，且属于同一级组织轮廓；RETR_EXTERNAL返回最外边的轮廓，忽略子轮廓；RETR_CCOMP返回所有的轮廓并将轮廓分为两级组织结构;RETR_TREE返回所有轮廓，并且创建一个完整的组织结构列表。</span>                frame1,cnts1, contours1<span class="token operator">=</span> cv2.findContours<span class="token punctuation">(</span>mask_red, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 第三个参数选定的意义在于将轮廓上的冗余点都去掉，压缩轮廓，从而节省内存开支。</span>                frame3,cnts3, contours3<span class="token operator">=</span> cv2.findContours<span class="token punctuation">(</span>mask_green,cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span>                <span class="token keyword">for</span> cnt <span class="token keyword">in</span> cnts1:                    M,center_x,center_y<span class="token operator">=</span>cal<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span><span class="token operator">=</span>cv2.boundingRect<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回矩阵的四个点，计算轮廓的垂直边界最小矩形，矩形是与图像上下边界平行的</span>                    if<span class="token punctuation">(</span>w<span class="token operator">></span>100 and h<span class="token operator">></span>100<span class="token punctuation">)</span>:                        draw<span class="token punctuation">(</span>cnts1,<span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span>,<span class="token punctuation">(</span>240, 65, 85<span class="token punctuation">)</span>,<span class="token punctuation">(</span>0, 255, 0<span class="token punctuation">))</span>                        <span class="token keyword">if</span> <span class="token punctuation">((</span>x + w / 2<span class="token punctuation">)</span> <span class="token operator">></span> center_x<span class="token punctuation">)</span>:                            command<span class="token punctuation">(</span><span class="token string">'LeftRedArrow'</span>,<span class="token punctuation">(</span>0,0,255<span class="token punctuation">)</span>,<span class="token string">'o'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 由于是红色箭头，所以发出停止的命令</span>                            flag<span class="token operator">=</span>1                        else:                            command<span class="token punctuation">(</span><span class="token string">'RightRedArrow'</span>,<span class="token punctuation">(</span>0,0,255<span class="token punctuation">)</span>,<span class="token string">'p'</span><span class="token punctuation">)</span>                            flag<span class="token operator">=</span>1                <span class="token keyword">for</span> cnt <span class="token keyword">in</span> cnts3:                    M,center_x,center_y<span class="token operator">=</span>cal<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>x, y, w, h<span class="token punctuation">)</span> <span class="token operator">=</span> cv2.boundingRect<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>                      if<span class="token punctuation">(</span>w<span class="token operator">></span>100 and h<span class="token operator">></span>100<span class="token punctuation">)</span>:                        draw<span class="token punctuation">(</span>cnts3,<span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span>,<span class="token punctuation">(</span>0, 255, 255<span class="token punctuation">)</span>,<span class="token punctuation">(</span>0, 255, 0<span class="token punctuation">))</span>                        <span class="token keyword">if</span> <span class="token punctuation">((</span>x + w / 2<span class="token punctuation">)</span> <span class="token operator">></span> center_x<span class="token punctuation">)</span>:                            command<span class="token punctuation">(</span><span class="token string">'LeftGreenArrow'</span>,<span class="token punctuation">(</span>0,255,0<span class="token punctuation">)</span>,<span class="token string">'m'</span><span class="token punctuation">)</span>                              flag<span class="token operator">=</span>1                        else:                                                                                      command<span class="token punctuation">(</span><span class="token string">'RightGreenArrow'</span>,<span class="token punctuation">(</span>0,255,0<span class="token punctuation">)</span>,<span class="token string">'n'</span><span class="token punctuation">)</span>                            flag<span class="token operator">=</span>1                cv2.imshow<span class="token punctuation">(</span><span class="token string">'frame'</span>,frame<span class="token punctuation">)</span>                cv2.waitKey<span class="token punctuation">(</span>800<span class="token punctuation">)</span>                ser.flush<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#if c==27:</span>                <span class="token comment" spellcheck="true">#    break</span>                cv2.destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> flag<span class="token operator">==</span>1:                    print <span class="token string">"got instruction"</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">:</span>                    print <span class="token string">"did not get instruction"</span>        cap.release<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="下位机代码"><a href="#下位机代码" class="headerlink" title="下位机代码"></a>下位机代码</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#define PIN_PWML 9</span><span class="token comment" spellcheck="true">#define PIN_PWMR 10</span><span class="token comment" spellcheck="true">#define PIN_AIN3 5//对应板子上INPUT3左侧轮子</span><span class="token comment" spellcheck="true">#define PIN_AIN4 4//对应板子上INPUT4</span><span class="token comment" spellcheck="true">#define PIN_AIN1 2//对应板子上INPUT1右侧</span><span class="token comment" spellcheck="true">#define PIN_AIN2 3//对应板子上INPUT2</span><span class="token comment" spellcheck="true">#define Trig 6 //定义超声波信号发出接口</span><span class="token comment" spellcheck="true">#define Echo 7 //定义超声波信号接收接口</span>float cm<span class="token punctuation">;</span> //距离变量float temp<span class="token punctuation">;</span>  int flag<span class="token punctuation">;</span>void setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   Serial.begin<span class="token punctuation">(</span>9600<span class="token punctuation">)</span><span class="token punctuation">;</span>   //测速引脚初始化  while<span class="token punctuation">(</span>Serial.available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"start"</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    delay<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial.print<span class="token punctuation">(</span><span class="token string">"wheels on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //串口初始化  pinMode<span class="token punctuation">(</span>PIN_PWML,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_PWMR,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_AIN3,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_AIN4,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    pinMode<span class="token punctuation">(</span>PIN_AIN1,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_AIN2,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  //超声波控制引脚初始化  pinMode<span class="token punctuation">(</span>Trig, OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>Echo, INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Stop<span class="token punctuation">(</span>int t<span class="token punctuation">)</span><span class="token punctuation">{</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  delay<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Go<span class="token punctuation">(</span><span class="token punctuation">)</span> //直线行驶<span class="token punctuation">{</span>  analogWrite<span class="token punctuation">(</span>PIN_PWML,100<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  analogWrite<span class="token punctuation">(</span>PIN_PWMR,100<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Right<span class="token punctuation">(</span>int t<span class="token punctuation">)</span>  //右转<span class="token punctuation">{</span>  analogWrite<span class="token punctuation">(</span>PIN_PWML,250<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  analogWrite<span class="token punctuation">(</span>PIN_PWMR,100<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  delay<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Left<span class="token punctuation">(</span>int t<span class="token punctuation">)</span><span class="token punctuation">{</span>  analogWrite<span class="token punctuation">(</span>PIN_PWML,7<span class="token punctuation">)</span><span class="token punctuation">;</span>//  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  analogWrite<span class="token punctuation">(</span>PIN_PWMR,180<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  delay<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Wave<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   //给Trig发送一个低高低的短时间脉冲,触发测距  digitalWrite<span class="token punctuation">(</span>Trig, LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> //给Trig发送一个低电平  delayMicroseconds<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>    //等待 2微妙  digitalWrite<span class="token punctuation">(</span>Trig,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> //给Trig发送一个高电平  delayMicroseconds<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>    //等待 10微妙  digitalWrite<span class="token punctuation">(</span>Trig, LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> //给Trig发送一个低电平    temp <span class="token operator">=</span> float<span class="token punctuation">(</span>pulseIn<span class="token punctuation">(</span>Echo, HIGH<span class="token punctuation">))</span><span class="token punctuation">;</span> //存储回波等待时间,  cm <span class="token operator">=</span> <span class="token punctuation">(</span>temp * 17 <span class="token punctuation">)</span>/1000<span class="token punctuation">;</span> //把回波时间换算成cm  //声速是340m/1s，换算成34000cm/1000000μs<span class="token operator">=</span>34/1000  //距离<span class="token punctuation">(</span>厘米<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>回波时间*<span class="token punctuation">(</span>34/1000<span class="token punctuation">))</span>/2<span class="token operator">=</span>回波时间*17/1000 // Serial.print<span class="token punctuation">(</span><span class="token string">"Echo ="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // Serial.print<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>//串口输出等待时间的原始数据  //Serial.print<span class="token punctuation">(</span><span class="token string">" | | Distance = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Serial.print<span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">;</span>//串口输出距离换算成cm的结果  //Serial.println<span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //delay<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Wave<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>cm<span class="token operator">&lt;=</span>40<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Stop<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span>0<span class="token punctuation">;</span>         if<span class="token punctuation">(</span>Serial.available<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  <span class="token string">'s'</span><span class="token operator">==</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">))</span>//一个s对应一个ready对应一次停止        <span class="token punctuation">{</span>                        Serial.print<span class="token punctuation">(</span><span class="token string">"Ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//停车并且就绪准备读取图片信息            while<span class="token punctuation">(</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag<span class="token operator">!=</span>1<span class="token punctuation">)</span>//读取串口信息            <span class="token punctuation">{</span>              delay<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>               char temp<span class="token operator">=</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 switch<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>//判断指令              <span class="token punctuation">{</span>               <span class="token keyword">case</span> <span class="token string">'m'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Left<span class="token punctuation">(</span>850<span class="token punctuation">)</span><span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">case</span> <span class="token string">'n'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Right<span class="token punctuation">(</span>700<span class="token punctuation">)</span><span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">case</span> <span class="token string">'o'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">case</span> <span class="token string">'p'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token punctuation">}</span>               //Serial.flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span>             Wave<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//继续进行超声波检测    <span class="token punctuation">}</span>    <span class="token keyword">else</span>      Go<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本项目基于上位机Raspberry Pi和下位机Arduino相互通信的环境，利用SSH远程登录，结合摄像头OpenCV和&lt;br&gt;Python进行图像的传输并判别交通信号的箭头，小车识别到绿色箭头朝箭头指示方向转弯，识别到红色箭头则&lt;br&gt;停在原地，并计算左右两侧的 PWM</summary>
      
    
    
    
    <category term="机器人" scheme="http://victsonder.github.io/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    
    <category term="机器人" scheme="http://victsonder.github.io/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
</feed>
