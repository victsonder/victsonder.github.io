<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Programming</title>
      <link href="/2022/03/04/Programming/"/>
      <url>/2022/03/04/Programming/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English</title>
      <link href="/2022/03/04/English/"/>
      <url>/2022/03/04/English/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/weixin.jpg" alt="微信公众号 | 维尼的糖果罐"></p>]]></content>
      
      
      <categories>
          
          <category> 英语学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Raspberry Pi+OpenCV+Arduino 的智能小车</title>
      <link href="/2022/03/03/%E5%9F%BA%E4%BA%8E%20Raspberry%20Pi+OpenCV+Arduino%20%E7%9A%84%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6/"/>
      <url>/2022/03/03/%E5%9F%BA%E4%BA%8E%20Raspberry%20Pi+OpenCV+Arduino%20%E7%9A%84%E6%99%BA%E8%83%BD%E5%B0%8F%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<p>本项目基于上位机Raspberry Pi和下位机Arduino相互通信的环境，利用SSH远程登录，结合摄像头OpenCV和<br>Python进行图像的传输并判别交通信号的箭头，小车识别到绿色箭头朝箭头指示方向转弯，识别到红色箭头则<br>停在原地，并计算左右两侧的 PWM 值实现直线行驶，利用超声波模块检测小车前方障碍物距离实现避障。<br><img src="/images/cv2.jpg"></p><h2 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h2><pre class=" language-bash"><code class="language-bash">    本项目有两个控制板块，树莓派作为上位机，Arduino作为下位机，超声波模块用于检测前方一定距离内是否有箭头标志阻挡前进的路线，电机驱动模块以PWM方式控制左右两侧的轮子（左边两个轮子相同速度信号，右边两个轮子相同速度信号），通过左右车轮的速度差来达到转弯的效果。    树莓派作为上位机，通过摄像头判别交通箭头的信号。判别箭头是通过判断识别到的轮廓（箭头轮廓）的重心和最小外接矩形的重心两者的位置，箭头的朝向跟箭头重心的位置直接关联，所以可以根据两个重心的位置关系来判断箭头是左箭头还是右箭头。关于颜色的识别，将RGB颜色转化位HSV空间的颜色，判断图片中的颜色是否在绿色或者红色的色域中，在色域中则说明是对应的颜色。</code></pre><p><img src="/images/cv.png" alt="框架"></p><h2 id="制作方案"><a href="#制作方案" class="headerlink" title="制作方案"></a>制作方案</h2><h3 id="环境的安装"><a href="#环境的安装" class="headerlink" title="环境的安装"></a>环境的安装</h3><p>主要涉及关于树莓派和OpenCV的安装<br><strong>·1 树莓派安装</strong>（便于可视化可以配置一台显示屏，但意义就没有了，因此获取树莓派IP后可以通过SSH远程控制树莓派）<br>    1.1 下载系统镜像（之前写过关于<a href="https://blog.csdn.net/qq_43451257/article/details/105060324?spm=1001.2014.3001.5502">Ubuntu16.04下Git的安装</a>）,此处使用的是Raspbian的镜像（自带桌面和一些软件）<br>    1.2 格式化SD卡，将镜像写入，完成系统的安装<br>    1.3 开启SSH<br>        首先在根目录下新建SSH文件，用于远程登录，然后就把SD卡插到树莓派上；<br>        第一次需要用网线连接树莓派和电脑，使其处于同一网段下，然后通过PuTTY配置<br>        <strong>IP地址：raspberrypi.local 端口：22</strong><br>        连接成功后输入登录名pi和密码raspberry,接下来简单配置并连接与电脑相同的WiFi；<br>        可下载一个VNC Viewer用于连接到树莓派的桌面。</p><p><strong>·2 OpenCV安装</strong><br>    安装并编译OpenCV的资源库<br>    注意接下来都要在cv的环境中操作</p><h3 id="硬件的连接"><a href="#硬件的连接" class="headerlink" title="硬件的连接"></a>硬件的连接</h3><p><strong>主要器材：</strong><br>航模电池：给Arduino和电机驱动模块供电；<br>降压模块：用于降压保护Arduino和电机，并可以稳定电压；<br>电机驱动模块（L298N）：给电机供电，左侧两个电机的正极同时连接电机驱动模块上的一个out3，负极连接到out4，右侧连接out1、out2；<br>超声波模块：直接接在Arduino板块上，由Arduino供电并且由Arduino读取返回的信号值，即反馈小车当前的位置状态。</p><p>Step1. 将树莓派与Arduino通过USB线（通用串行总线）建立连接。【Arduino在树莓派中是靠串口连接通信的，有<a href="https://www.cnblogs.com/jingxinbk/p/12408886.html">两种</a>：USB连接和GPIO通信(其中树莓派的RX引脚——Arduino的TX引脚，树莓派的TX引脚——Arduino的RX引脚，树莓派的GND引脚——Arduino的GND引脚)】<br>Step2. 在树莓派终端输入ls &#x2F;dev&#x2F;tty*查看两者连接端口的名字，若是出现ttyACM0则二者成功建立通信。<br>Step3. 编写树莓派与Arduino之间通信的代码</p><pre><code>树莓派端：</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> serial    <span class="token comment" spellcheck="true"># /dev/ttyACM0 是树莓派上编号为0的USB口（可以在/dev目录下通过观察拔插对应的USB口找到对应的编号）</span>ser <span class="token operator">=</span> serial.Serial<span class="token punctuation">(</span><span class="token string">'/dev/ttyACM0'</span>, 9600,timeout<span class="token operator">=</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true"># PL011串口[/dev/ttyACM0]（外部晶振驱动）较 mini串口[/dev/ttyS0]（自带晶振驱动）稳定性高</span>try:  <span class="token keyword">while</span> 1:    ser.write<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 树莓派通过串口发送字符's'</span>    response <span class="token operator">=</span> ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 读取串口的返回值</span>    print response<span class="token punctuation">;</span>except:  ser.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 抛出异常后关闭</span></code></pre><pre><code>Arduino端：【注意：将程序烧到Arduino后一定要把USB拔掉插到树莓派上，不然会导致串口占用！！！】</code></pre><pre class=" language-bash"><code class="language-bash">void setup<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Serial.begin<span class="token punctuation">(</span>9600<span class="token punctuation">)</span><span class="token punctuation">;</span> // 波特率9600 bps<span class="token punctuation">}</span>void loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Serial.available<span class="token punctuation">(</span><span class="token punctuation">))</span>  <span class="token comment" spellcheck="true"># 判断串口缓存区是否有数据</span>    <span class="token punctuation">{</span>      if<span class="token punctuation">(</span><span class="token string">'s'</span> <span class="token operator">==</span> Serial.read<span class="token punctuation">(</span><span class="token punctuation">))</span>        Serial.println<span class="token punctuation">(</span><span class="token string">"Hello Raspberry,I am Arduino."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># Arduino收到字符's'后，就向串口打印"Hello Raspberry,I am Arduino."</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>   </code></pre><p><img src="/images/cv1.png" alt="硬件连接图"></p><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>RGB模型：R-红色、G-绿色、B-蓝色；(0,0,0)表示黑色、(255, 255, 255)表示白色。<br>HSV模型：色调（H:hue）—— 0°(以度为计量单位) ~ 360°(0~2π)，从逆时针开始计算，红色为0°，绿色为120°，蓝色为240°<br>        饱和度（S:saturation）—— 0.0 ~ 1.0<br>        亮度（V:value）—— 0.0(黑色)～1.0(白色)</p><p><img src="/images/Picture1.png"></p><p>So, <a href="https://blog.csdn.net/qq_33759946/article/details/90295377?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2.pc_relevant_aa&utm_relevant_index=5">为什么</a>要采用HSV空间的色域？</p><p><a href="https://math.hws.edu/graphicsbook/demos/c2/rgb-hsv.html">RGB&#x2F;HSV Color Demo</a></p><p>注意：在HSV中，V受光照的影响最大<br>处理方式：对V进行直方图均衡化处理，使各个亮度值的点数相近。</p><p>Step1. 获得红色掩膜（进行按位或运算1|1&#x3D;1，1|0&#x3D;0，0|1&#x3D;0，0|0&#x3D;0）<br>       获得绿色掩膜<br>Step2. 中值滤波处理（平滑图像，滤去噪声,保护图像的边缘）<br>Step3. 寻找轮廓并计算质心 【cv2.findContours()】<br>       比较轮廓重心(center_x, center_y)和外接矩形的重心(x+w&#x2F;&#x2F;2, y+h&#x2F;&#x2F;2),<br>        if ((x + w &#x2F;&#x2F; 2) &gt; center_x):<br>            向左转<br>        else :<br>            向右转</p><h3 id="上下位机之间的通信"><a href="#上下位机之间的通信" class="headerlink" title="上下位机之间的通信"></a>上下位机之间的通信</h3><p>Step1. 遇障—Arduino向树莓派传达Ready信号，树莓派识别完—树莓派向Arduino传达指令<br>Step2. 先由树莓派发起通信，Arduino进行回应</p><pre class=" language-bash"><code class="language-bash">ser.write<span class="token punctuation">(</span>signal.encode<span class="token punctuation">(</span><span class="token punctuation">))</span>time.sleep<span class="token punctuation">(</span>1<span class="token punctuation">)</span>response<span class="token operator">=</span>ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span>print response</code></pre><p>Step3. Arduino等待反馈控制信号</p><pre class=" language-bash"><code class="language-bash">Serial.available<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  <span class="token string">'s'</span><span class="token operator">==</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="上位机代码"><a href="#上位机代码" class="headerlink" title="上位机代码"></a>上位机代码</h2><pre class=" language-bash"><code class="language-bash">上位机<span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token string">''</span><span class="token string">'首先由树莓派发起通讯，告知Arduino可以开始运动了；Arduino接收到树莓派的信号后开始运动，进入loop循环；遇到障碍物停车，发送信号，等待树莓派的指示，不进入loop；树莓派拍照，识别，传送信号给Arduino，Arduino收到信号，开始运动。              树莓派循环等待信号'</span><span class="token string">''</span><span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> numpy as np<span class="token function">import</span> cv2<span class="token function">import</span> serialser <span class="token operator">=</span> serial.Serial<span class="token punctuation">(</span><span class="token string">'/dev/ttyACM0'</span>, 9600,timeout<span class="token operator">=</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>font<span class="token operator">=</span> cv2.FONT_HERSHEY_SIMPLEXlower_red1<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>0,128,40<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 浅红色阈值下界</span>higher_red1<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>5,255,255<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 浅红色阈值上界</span>lower_red2<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>156,128,40<span class="token punctuation">]</span><span class="token punctuation">)</span>  higher_red2<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>180,255,255<span class="token punctuation">]</span><span class="token punctuation">)</span>  lower_green<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>35,100,46<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绿色阈值下界</span>higher_green<span class="token operator">=</span>np.array<span class="token punctuation">(</span><span class="token punctuation">[</span>77,255,255<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 绿色阈值上界</span>def cal<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>:    M <span class="token operator">=</span> cv2.moments<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算第一条轮廓的各阶矩,字典形式</span>    center_x <span class="token operator">=</span> int<span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m10"</span><span class="token punctuation">]</span> / <span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m00"</span><span class="token punctuation">]</span>+1e-20<span class="token punctuation">))</span>    center_y <span class="token operator">=</span> int<span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m01"</span><span class="token punctuation">]</span> / <span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">"m00"</span><span class="token punctuation">]</span>+1e-20<span class="token punctuation">))</span>    <span class="token keyword">return</span> M,center_x,center_ydef command<span class="token punctuation">(</span>text,color,signal<span class="token punctuation">)</span>:    ser.write<span class="token punctuation">(</span>signal.encode<span class="token punctuation">(</span><span class="token punctuation">))</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span>    response<span class="token operator">=</span>ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>    print response    cv2.putText<span class="token punctuation">(</span>frame, text, <span class="token punctuation">(</span>x, y - 5<span class="token punctuation">)</span>, font, 1.0, color, 2<span class="token punctuation">)</span>    print text    flag<span class="token operator">=</span>1def draw<span class="token punctuation">(</span>cnt,<span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span>,rectcolor,edgecentercolor<span class="token punctuation">)</span>:    cv2.rectangle<span class="token punctuation">(</span>frame, <span class="token punctuation">(</span>x, y<span class="token punctuation">)</span>, <span class="token punctuation">(</span>x + w, y + h<span class="token punctuation">)</span>, rectcolor, 2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将检测到的颜色框起来</span>    cv2.circle<span class="token punctuation">(</span>frame, <span class="token punctuation">(</span>x + w // 2, y + h // 2<span class="token punctuation">)</span>, 7, edgecentercolor, -1<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#质心</span>    cv2.drawContours<span class="token punctuation">(</span>frame, cnt, -1, edgecentercolor, 2<span class="token punctuation">)</span>ser.write<span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#告诉Arduino可以开始运动，进入loop循环开车</span>response <span class="token operator">=</span> ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#从串口读取一个字符串</span>print response while<span class="token punctuation">(</span>1<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true"># 等待Ready信号</span>    print <span class="token string">"in waiting"</span>    flag<span class="token operator">=</span>0 <span class="token comment" spellcheck="true">#得到命令flag=1,若是没有得到命令flag=0,继续进行摄像头的工作;每次小车停止后flag信息归零</span>    ser.write<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#发起通信，等待小车遇到障碍物</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>    response <span class="token operator">=</span> ser.readall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#读取遇到障碍物的消息</span>    time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>    print response <span class="token comment" spellcheck="true">#Ready</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token operator">==</span><span class="token string">'Ready'</span><span class="token punctuation">)</span>:        cap<span class="token operator">=</span>cv2.VideoCapture<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打开摄像头</span>        if<span class="token punctuation">(</span>cap.isOpened<span class="token punctuation">(</span><span class="token punctuation">))</span>:            while<span class="token punctuation">(</span>flag<span class="token operator">!=</span>1<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true">#没有得到命令就继续拍照识别</span>                print <span class="token string">'camera go'</span>                ret,frame<span class="token operator">=</span>cap.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按帧读取，这是读取一帧</span>                <span class="token comment" spellcheck="true"># 转化为HSV空间</span>                img_hsv<span class="token operator">=</span>cv2.cvtColor<span class="token punctuation">(</span>frame,cv2.COLOR_BGR2HSV<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#cv2.imshow('img_hsv', img_hsv)</span>                mask_red1<span class="token operator">=</span>cv2.inRange<span class="token punctuation">(</span>img_hsv,lower_red1,higher_red1<span class="token punctuation">)</span>                mask_red2<span class="token operator">=</span>cv2.inRange<span class="token punctuation">(</span>img_hsv,lower_red2,higher_red2<span class="token punctuation">)</span>                                mask_green<span class="token operator">=</span>cv2.inRange<span class="token punctuation">(</span>img_hsv,lower_green,higher_green<span class="token punctuation">)</span>                mask_red<span class="token operator">=</span>cv2.bitwise_or<span class="token punctuation">(</span>mask_red1,mask_red2<span class="token punctuation">)</span>                mask_green <span class="token operator">=</span> cv2.medianBlur<span class="token punctuation">(</span>mask_green, 7<span class="token punctuation">)</span>                  mask_red <span class="token operator">=</span> cv2.medianBlur<span class="token punctuation">(</span>mask_red, 7<span class="token punctuation">)</span>                  mask<span class="token operator">=</span>cv2.bitwise_or<span class="token punctuation">(</span>mask_green,mask_red<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 按位运算</span>                <span class="token comment" spellcheck="true"># 第一个参数是输入图像，第二个是轮廓检索模式，第三个是轮廓近似方法</span>                <span class="token comment" spellcheck="true"># 对应的返回值分别是图像，轮廓（是一个Python列表，用于存储图像中的所有轮廓），（轮廓的）层析结构</span>                <span class="token comment" spellcheck="true"># RETR_LIST用于提取所有的轮廓，且属于同一级组织轮廓；RETR_EXTERNAL返回最外边的轮廓，忽略子轮廓；RETR_CCOMP返回所有的轮廓并将轮廓分为两级组织结构;RETR_TREE返回所有轮廓，并且创建一个完整的组织结构列表。</span>                frame1,cnts1, contours1<span class="token operator">=</span> cv2.findContours<span class="token punctuation">(</span>mask_red, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 第三个参数选定的意义在于将轮廓上的冗余点都去掉，压缩轮廓，从而节省内存开支。</span>                frame3,cnts3, contours3<span class="token operator">=</span> cv2.findContours<span class="token punctuation">(</span>mask_green,cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span>                <span class="token keyword">for</span> cnt <span class="token keyword">in</span> cnts1:                    M,center_x,center_y<span class="token operator">=</span>cal<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span><span class="token operator">=</span>cv2.boundingRect<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回矩阵的四个点，计算轮廓的垂直边界最小矩形，矩形是与图像上下边界平行的</span>                    if<span class="token punctuation">(</span>w<span class="token operator">></span>100 and h<span class="token operator">></span>100<span class="token punctuation">)</span>:                        draw<span class="token punctuation">(</span>cnts1,<span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span>,<span class="token punctuation">(</span>240, 65, 85<span class="token punctuation">)</span>,<span class="token punctuation">(</span>0, 255, 0<span class="token punctuation">))</span>                        <span class="token keyword">if</span> <span class="token punctuation">((</span>x + w / 2<span class="token punctuation">)</span> <span class="token operator">></span> center_x<span class="token punctuation">)</span>:                            command<span class="token punctuation">(</span><span class="token string">'LeftRedArrow'</span>,<span class="token punctuation">(</span>0,0,255<span class="token punctuation">)</span>,<span class="token string">'o'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 由于是红色箭头，所以发出停止的命令</span>                            flag<span class="token operator">=</span>1                        else:                            command<span class="token punctuation">(</span><span class="token string">'RightRedArrow'</span>,<span class="token punctuation">(</span>0,0,255<span class="token punctuation">)</span>,<span class="token string">'p'</span><span class="token punctuation">)</span>                            flag<span class="token operator">=</span>1                <span class="token keyword">for</span> cnt <span class="token keyword">in</span> cnts3:                    M,center_x,center_y<span class="token operator">=</span>cal<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>x, y, w, h<span class="token punctuation">)</span> <span class="token operator">=</span> cv2.boundingRect<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>                      if<span class="token punctuation">(</span>w<span class="token operator">></span>100 and h<span class="token operator">></span>100<span class="token punctuation">)</span>:                        draw<span class="token punctuation">(</span>cnts3,<span class="token punctuation">(</span>x,y,w,h<span class="token punctuation">)</span>,<span class="token punctuation">(</span>0, 255, 255<span class="token punctuation">)</span>,<span class="token punctuation">(</span>0, 255, 0<span class="token punctuation">))</span>                        <span class="token keyword">if</span> <span class="token punctuation">((</span>x + w / 2<span class="token punctuation">)</span> <span class="token operator">></span> center_x<span class="token punctuation">)</span>:                            command<span class="token punctuation">(</span><span class="token string">'LeftGreenArrow'</span>,<span class="token punctuation">(</span>0,255,0<span class="token punctuation">)</span>,<span class="token string">'m'</span><span class="token punctuation">)</span>                              flag<span class="token operator">=</span>1                        else:                                                                                      command<span class="token punctuation">(</span><span class="token string">'RightGreenArrow'</span>,<span class="token punctuation">(</span>0,255,0<span class="token punctuation">)</span>,<span class="token string">'n'</span><span class="token punctuation">)</span>                            flag<span class="token operator">=</span>1                cv2.imshow<span class="token punctuation">(</span><span class="token string">'frame'</span>,frame<span class="token punctuation">)</span>                cv2.waitKey<span class="token punctuation">(</span>800<span class="token punctuation">)</span>                ser.flush<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#if c==27:</span>                <span class="token comment" spellcheck="true">#    break</span>                cv2.destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> flag<span class="token operator">==</span>1:                    print <span class="token string">"got instruction"</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">:</span>                    print <span class="token string">"did not get instruction"</span>        cap.release<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="下位机代码"><a href="#下位机代码" class="headerlink" title="下位机代码"></a>下位机代码</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#define PIN_PWML 9</span><span class="token comment" spellcheck="true">#define PIN_PWMR 10</span><span class="token comment" spellcheck="true">#define PIN_AIN3 5//对应板子上INPUT3左侧轮子</span><span class="token comment" spellcheck="true">#define PIN_AIN4 4//对应板子上INPUT4</span><span class="token comment" spellcheck="true">#define PIN_AIN1 2//对应板子上INPUT1右侧</span><span class="token comment" spellcheck="true">#define PIN_AIN2 3//对应板子上INPUT2</span><span class="token comment" spellcheck="true">#define Trig 6 //定义超声波信号发出接口</span><span class="token comment" spellcheck="true">#define Echo 7 //定义超声波信号接收接口</span>float cm<span class="token punctuation">;</span> //距离变量float temp<span class="token punctuation">;</span>  int flag<span class="token punctuation">;</span>void setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   Serial.begin<span class="token punctuation">(</span>9600<span class="token punctuation">)</span><span class="token punctuation">;</span>   //测速引脚初始化  while<span class="token punctuation">(</span>Serial.available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"start"</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    delay<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial.print<span class="token punctuation">(</span><span class="token string">"wheels on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //串口初始化  pinMode<span class="token punctuation">(</span>PIN_PWML,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_PWMR,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_AIN3,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_AIN4,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    pinMode<span class="token punctuation">(</span>PIN_AIN1,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>PIN_AIN2,OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  //超声波控制引脚初始化  pinMode<span class="token punctuation">(</span>Trig, OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  pinMode<span class="token punctuation">(</span>Echo, INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Stop<span class="token punctuation">(</span>int t<span class="token punctuation">)</span><span class="token punctuation">{</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  delay<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Go<span class="token punctuation">(</span><span class="token punctuation">)</span> //直线行驶<span class="token punctuation">{</span>  analogWrite<span class="token punctuation">(</span>PIN_PWML,100<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  analogWrite<span class="token punctuation">(</span>PIN_PWMR,100<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Right<span class="token punctuation">(</span>int t<span class="token punctuation">)</span>  //右转<span class="token punctuation">{</span>  analogWrite<span class="token punctuation">(</span>PIN_PWML,250<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  analogWrite<span class="token punctuation">(</span>PIN_PWMR,100<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  delay<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Left<span class="token punctuation">(</span>int t<span class="token punctuation">)</span><span class="token punctuation">{</span>  analogWrite<span class="token punctuation">(</span>PIN_PWML,7<span class="token punctuation">)</span><span class="token punctuation">;</span>//  digitalWrite<span class="token punctuation">(</span>PIN_AIN3,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN4,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  analogWrite<span class="token punctuation">(</span>PIN_PWMR,180<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN1,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>  digitalWrite<span class="token punctuation">(</span>PIN_AIN2,LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>  delay<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void Wave<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   //给Trig发送一个低高低的短时间脉冲,触发测距  digitalWrite<span class="token punctuation">(</span>Trig, LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> //给Trig发送一个低电平  delayMicroseconds<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>    //等待 2微妙  digitalWrite<span class="token punctuation">(</span>Trig,HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span> //给Trig发送一个高电平  delayMicroseconds<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>    //等待 10微妙  digitalWrite<span class="token punctuation">(</span>Trig, LOW<span class="token punctuation">)</span><span class="token punctuation">;</span> //给Trig发送一个低电平    temp <span class="token operator">=</span> float<span class="token punctuation">(</span>pulseIn<span class="token punctuation">(</span>Echo, HIGH<span class="token punctuation">))</span><span class="token punctuation">;</span> //存储回波等待时间,  cm <span class="token operator">=</span> <span class="token punctuation">(</span>temp * 17 <span class="token punctuation">)</span>/1000<span class="token punctuation">;</span> //把回波时间换算成cm  //声速是340m/1s，换算成34000cm/1000000μs<span class="token operator">=</span>34/1000  //距离<span class="token punctuation">(</span>厘米<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>回波时间*<span class="token punctuation">(</span>34/1000<span class="token punctuation">))</span>/2<span class="token operator">=</span>回波时间*17/1000 // Serial.print<span class="token punctuation">(</span><span class="token string">"Echo ="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // Serial.print<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>//串口输出等待时间的原始数据  //Serial.print<span class="token punctuation">(</span><span class="token string">" | | Distance = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //Serial.print<span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">;</span>//串口输出距离换算成cm的结果  //Serial.println<span class="token punctuation">(</span><span class="token string">"cm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //delay<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Wave<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>cm<span class="token operator">&lt;=</span>40<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Stop<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span>0<span class="token punctuation">;</span>         if<span class="token punctuation">(</span>Serial.available<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span>  <span class="token string">'s'</span><span class="token operator">==</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">))</span>//一个s对应一个ready对应一次停止        <span class="token punctuation">{</span>                        Serial.print<span class="token punctuation">(</span><span class="token string">"Ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//停车并且就绪准备读取图片信息            while<span class="token punctuation">(</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> flag<span class="token operator">!=</span>1<span class="token punctuation">)</span>//读取串口信息            <span class="token punctuation">{</span>              delay<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>               char temp<span class="token operator">=</span>Serial.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 switch<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>//判断指令              <span class="token punctuation">{</span>               <span class="token keyword">case</span> <span class="token string">'m'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Left<span class="token punctuation">(</span>850<span class="token punctuation">)</span><span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">case</span> <span class="token string">'n'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Right<span class="token punctuation">(</span>700<span class="token punctuation">)</span><span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">case</span> <span class="token string">'o'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token keyword">case</span> <span class="token string">'p'</span>:<span class="token punctuation">{</span>Serial.print<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">=</span>1<span class="token punctuation">;</span>Stop<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span class="token punctuation">}</span>               //Serial.flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span>             Wave<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//继续进行超声波检测    <span class="token punctuation">}</span>    <span class="token keyword">else</span>      Go<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
